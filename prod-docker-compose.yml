version: '3.7'

services:
  reverse_proxy:
    build:
      context: ./prod-reverse-proxy
    container_name: reverse_proxy
    restart: unless-stopped
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/reverse-proxy-logs:/var/log/nginx
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    image: certbot/certbot:v1.5.0
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot-logs:/var/log/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    restart: unless-stopped
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    restart: unless-stopped
    env_file:
      - .backend.env
    ports:
      - 8600:8600
    environment:
      NODE_ENV: production
      PORT: 8600
  postgres:
    image: postgres:11.6-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5600:5432
    volumes:
      - ./db/data:/var/lib/postgresql/data
    env_file:
      - .db.env
  solr:
    build:
      context: ./solr
    container_name: solr
    restart: unless-stopped
    ports:
      - 8983:8983
    volumes:
      - ./solr/data:/var/solr
    command: ["solr-precreate", "submission-search", "/opt/solr-8.4.1/config"]

networks:
  default:
    name: codeclusters-prod
